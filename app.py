import os
import sqlite3
import json
import google.generativeai as genai
from flask import Flask, render_template, request, redirect, url_for, g, abort, Response, flash
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
app.secret_key = 'your_very_secret_key_for_flask'
DATABASE = 'chat_app.db'

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini ---
try:
    genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–±–æ—á—É—é –º–æ–¥–µ–ª—å. –ö–æ–≥–¥–∞ 2.5 —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞, –∑–∞–º–µ–Ω–∏—Ç–µ –∑–¥–µ—Å—å.
    model = genai.GenerativeModel('gemini-2.5-flash')
    print("‚úÖ –ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞: gemini-1.5-flash")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini API: {e}")
    model = None

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
def get_db():
    db = getattr(g, '_database', None)
    if db is None:
        db = g._database = sqlite3.connect(DATABASE)
        db.row_factory = sqlite3.Row
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, '_database', None)
    if db is not None:
        db.close()

@app.context_processor
def inject_chats():
    db = get_db()
    cursor = db.cursor()
    cursor.execute("SELECT id, title FROM chats ORDER BY created_at DESC")
    all_chats = cursor.fetchall()
    return dict(all_chats=all_chats)

# --- –ú–∞—Ä—à—Ä—É—Ç—ã ---

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat/<int:chat_id>')
def chat(chat_id):
    db = get_db()
    current_chat = db.cursor().execute("SELECT * FROM chats WHERE id = ?", (chat_id,)).fetchone()
    if not current_chat:
        abort(404)
    messages = db.cursor().execute("SELECT role, content FROM messages WHERE chat_id = ? ORDER BY timestamp ASC", (chat_id,)).fetchall()
    display_messages = [msg for msg in messages if msg['role'] != 'system']
    return render_template('chat.html', chat=current_chat, messages=display_messages)

@app.route('/stream_chat/<int:chat_id>', methods=['POST'])
def stream_chat(chat_id):
    print(f"\nüöÄ –ü–æ–ª—É—á–µ–Ω POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ /stream_chat/{chat_id}")
    user_input = request.form.get('user_input', '').strip()
    if not user_input:
        return Response("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", status=400)

    print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{user_input}'")
    db = get_db()
    cursor = db.cursor()
    cursor.execute("INSERT INTO messages (chat_id, role, content) VALUES (?, ?, ?)", (chat_id, 'user', user_input))
    db.commit()
    print("üíæ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î.")

    messages = cursor.execute("SELECT role, content FROM messages WHERE chat_id = ? ORDER BY timestamp ASC", (chat_id,)).fetchall()
    history = [{'role': msg['role'], 'parts': [msg['content']]} for msg in messages]
    print(f"üìñ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –∏–∑ {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è API.")

    def generate():
        try:
            print("üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Gemini API...")
            chat_session = model.start_chat(history=history)
            stream = chat_session.send_message(user_input, stream=True)
            print("üåä –ù–∞—á–∞–ª–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç Gemini.")
            full_response_text = ""
            for chunk in stream:
                if chunk.text:
                    full_response_text += chunk.text
                    yield f"data: {json.dumps({'text': chunk.text})}\n\n"
            print("‚úÖ –°—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.")
            db_conn = sqlite3.connect(DATABASE)
            db_conn.cursor().execute("INSERT INTO messages (chat_id, role, content) VALUES (?, ?, ?)", (chat_id, 'model', full_response_text))
            db_conn.commit()
            db_conn.close()
            print("üíæ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î.")
        except Exception as e:
            print(f"‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–ù–£–¢–†–ò –ì–ï–ù–ï–†–ê–¢–û–†–ê: {e}")
            yield f"data: {json.dumps({'error': f'–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {e}'})}\n\n"
    return Response(generate(), mimetype='text/event-stream')

@app.route('/new_chat', methods=['POST'])
def new_chat():
    system_prompt = request.form['system_prompt'].strip()
    first_message = request.form['first_message'].strip()
    if not first_message:
        return redirect(url_for('index'))
    db = get_db()
    cursor = db.cursor()
    title = first_message[:50] + '...' if len(first_message) > 50 else first_message
    cursor.execute("INSERT INTO chats (title, system_prompt) VALUES (?, ?)", (title, system_prompt))
    new_chat_id = cursor.lastrowid
    if system_prompt:
        cursor.execute("INSERT INTO messages (chat_id, role, content) VALUES (?, ?, ?)", (new_chat_id, 'user', system_prompt))
        cursor.execute("INSERT INTO messages (chat_id, role, content) VALUES (?, ?, ?)", (new_chat_id, 'model', "–•–æ—Ä–æ—à–æ, —è –±—É–¥—É —Å–ª–µ–¥–æ–≤–∞—Ç—å —ç—Ç–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."))
    cursor.execute("INSERT INTO messages (chat_id, role, content) VALUES (?, ?, ?)", (new_chat_id, 'user', first_message))
    db.commit()
    messages = cursor.execute("SELECT role, content FROM messages WHERE chat_id = ? ORDER BY timestamp ASC", (new_chat_id,)).fetchall()
    history = [{'role': msg['role'], 'parts': [msg['content']]} for msg in messages]
    chat_session = model.start_chat(history=history)
    response = chat_session.send_message(first_message)
    cursor.execute("INSERT INTO messages (chat_id, role, content) VALUES (?, ?, ?)", (new_chat_id, 'model', response.text))
    db.commit()
    return redirect(url_for('chat', chat_id=new_chat_id))

@app.route('/delete_chat/<int:chat_id>', methods=['POST'])
def delete_chat(chat_id):
    db = get_db()
    cursor = db.cursor()
    cursor.execute("DELETE FROM messages WHERE chat_id = ?", (chat_id,))
    cursor.execute("DELETE FROM chats WHERE id = ?", (chat_id,))
    db.commit()
    flash("–ß–∞—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", "success")
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(debug=True)